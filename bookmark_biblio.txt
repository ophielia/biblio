UseCase16 - booksearch 3 full text indexing
					   2 search (title, author, keyword, publisher, shelfclass)Â 









---- begin commit changes ----

done - entities created, test made and failing
done - make test green!

---- end commit changes ----



----- begin branch changes ----


---- end branch changes ----

----- begin complete history ----

** MASTER **
complete - use case 1 - setup project
done - need client table, repository, as well as selectkey and value
done - setup git, checkin
done - add values to selectkey and value - type, status, detail status
done - change type, status, language and detail status in book to long

** USECASE14 ADDBOOK **
done - make structure - stubs for
done - controller
done - jsps
done - service
done - validator
done - clientservice
done - create test for service calls
done - make it green
done - fill in create jsp
done - fill in display jsp
done - filling out - book list (just temp - very simple)
done - implement validator
done - controller test
done - add processing to locationstatus...., and unknown to booktype
done - make method to copy into founddetails
done - make method to copy into bookdao
done - make a real query!
done -  make actual logic - single found, multiple found, none found
done - industry identifiers
done -  test searchService findAuthor method
done - implement copyCompleteDetailsIntoBook
done - add "old" entries in testCopyDetailsAuthor
done - test copyAuthorsIntoBook method CS
done - name convenience method in author
done - add detailstatus to db - detail found
done - add preview links to founddetails
done - open - illustrator handling
done - repository - find Publisher by name 
done - fill out test for copyAuthors to test for more cases
done - implement findSubjectForString - CS
skip this - (concentrate on test of public method instead) test copyCompleteDetailsIntoBook - make it green
done - finish search logic - if nothing found, search what??
done - elaborate query with publisher if necessary, illustrator
skip - big test of fillInDetailsForSingleBook(Long id) - with mocks
done - complete CS copyDetailsIntoFoundRecords - remember illustrators
done - implement findPublisherForName - CS
done - createCatalogEntryFromBookModel - add artist handling / db
done - revisit enter book - single line author, illustrator - fill in details afterwards
done - tie in fill in details in controller
done - page for assigning details...
done - problems assigning details page - assigndetail id is null, book id is null.  ponder
done - debug empty publisher in assigndetails.
done - debug author not saved in addEntry (CS)
done - block out 3 divs - main info, shelving info, additional details (underneath)
done - show full detail for book after insert
done - need nice displays for codes....
done - insert nice displays in show page....
done - Header (or just a bit more space) over details 
done - short author and illustrator name labels
done - code to only show if it has been filled in....
done - verified next to classification (shows verified if true)
done - pass language into loadBookModel
done - end of branch- lock down methods which had been tested.

** USE CASE 16, 20, 21, 22 import and classify books **
done - backend import
done - make front end for import
done - controller start
done - put "real" clientkey in controller
done - what about some sort of number - imported and errors to be shown on new page
done - make page
done - make it green - test CSI createCatalogEntriesFromList
done - CSI create..FromList - needs two things - check for duplicates  (, and escape apostrophes (check and see if this is necessary))
nevermind - test SSI findBookByClientId
done - add to menu
done - try it out
done - Progressive search for details
done - Classification structure made
done - begin MareschaleClassifier
done - fill in ClassificationDao - long key, textdisplay, imagedisplay, language, description
done - display classification in front end
done - remove displays from BookModel
done - correct show.jspx to not send Disps.
done - remove disps from BookModel
done - check classification - only english stuart little is classified, 
done -   and it's classified incorrectly!!!
done - test - client book id in existing add book

** MASTER WIDGET **

done - basic rendering is done. now need to 1) wire up to clicks and 2) do initial set on image - setCurrentId or the like...
done - check in, merge branch into master
done - select widget  ShelfClassSelect 
done - need to pass in - jsonText, input to be updated, change
done - next try SelectWidget alone without any contained widgets
done - mock up - wiping out and in is done
done - add handle to current display
done - done - add clicks to list items - to change current display
handle no image
done - fix tooltip for current display
done - add to click - set passed in node
done - quick delay in master - widget for shelf classification
done - reset isDebug to false in load-scripts when done.

----- end complete history ----

******* LATER DEVPT ******

bookstatus - processing - after book bought, but before it's shelved (waiting for cover, for example).  Screen to enter when shelved??
not now - usecase 16.5 findOrCreateArtist - to reuse names in db
not now - usecase 16.5 artist name handling in general not done - needs handling in CS
puzzle - how to insert a validator into controller test - basically, just do a different test to test Validator.  Stand alone test.
createCatalogEntryFromBookModel - graceful handling of exception calling google books api
assignBookDetails - graceful handling of exception

******* NOTES ******

1. Testing filling in books after import of details... Separate Google calls into their own
   service, which then can be mocked - and isolated for the test.
   
2. Indexing would be nice in future as aspect watching object implementing TextIndex or the like.  Not doing
   for now, because not really necessary.  Feels too pretty for initial implementation. 
   
3. ignored words by client!!     

******* USE CASE MASTER ******
