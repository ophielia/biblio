UseCase16 - importbooks 16	     Import list of books
						20	     Batch get info for books - guess shelf classification 
						21	     Progressive search for details
						22	     shelf classifcation

also - client book id in existing add book




----->  make front end for import
done - controller start
done - put "real" clientkey in controller
done - what about some sort of number - imported and errors to be shown on new page
done - make page

TESTS FIRST, then run through

done - make it green - test CSI createCatalogEntriesFromList
done - CSI create..FromList - needs two things - check for duplicates  (, and escape apostrophes (check and see if this is necessary))
nevermind - test SSI findBookByClientId

done - add to menu
try it out


classification - http://dojotoolkit.org/reference-guide/1.10/dijit/form/DropDownButton.html




---- begin commit changes ----




---- end commit changes ----



----- begin branch changes ----

done - backend import


---- end branch changes ----

----- begin complete history ----

** MASTER **
complete - use case 1 - setup project
done - need client table, repository, as well as selectkey and value
done - setup git, checkin
done - add values to selectkey and value - type, status, detail status
done - change type, status, language and detail status in book to long

** USECASE14 ADDBOOK **
done - make structure - stubs for
done - controller
done - jsps
done - service
done - validator
done - clientservice
done - create test for service calls
done - make it green
done - fill in create jsp
done - fill in display jsp
done - filling out - book list (just temp - very simple)
done - implement validator
done - controller test
done - add processing to locationstatus...., and unknown to booktype
done - make method to copy into founddetails
done - make method to copy into bookdao
done - make a real query!
done -  make actual logic - single found, multiple found, none found
done - industry identifiers
done -  test searchService findAuthor method
done - implement copyCompleteDetailsIntoBook
done - add "old" entries in testCopyDetailsAuthor
done - test copyAuthorsIntoBook method CS
done - name convenience method in author
done - add detailstatus to db - detail found
done - add preview links to founddetails
done - open - illustrator handling
done - repository - find Publisher by name 
done - fill out test for copyAuthors to test for more cases
done - implement findSubjectForString - CS
skip this - (concentrate on test of public method instead) test copyCompleteDetailsIntoBook - make it green
done - finish search logic - if nothing found, search what??
done - elaborate query with publisher if necessary, illustrator
skip - big test of fillInDetailsForSingleBook(Long id) - with mocks
done - complete CS copyDetailsIntoFoundRecords - remember illustrators
done - implement findPublisherForName - CS
done - createCatalogEntryFromBookModel - add artist handling / db
done - revisit enter book - single line author, illustrator - fill in details afterwards
done - tie in fill in details in controller
done - page for assigning details...
done - problems assigning details page - assigndetail id is null, book id is null.  ponder
done - debug empty publisher in assigndetails.
done - debug author not saved in addEntry (CS)
done - block out 3 divs - main info, shelving info, additional details (underneath)
done - show full detail for book after insert
done - need nice displays for codes....
done - insert nice displays in show page....
done - Header (or just a bit more space) over details 
done - short author and illustrator name labels
done - code to only show if it has been filled in....
done - verified next to classification (shows verified if true)
done - pass language into loadBookModel
done - end of branch- lock down methods which had been tested.




----- end complete history ----

******* LATER DEVPT ******

bookstatus - processing - after book bought, but before it's shelved (waiting for cover, for example).  Screen to enter when shelved??
not now - usecase 16.5 findOrCreateArtist - to reuse names in db
not now - usecase 16.5 artist name handling in general not done - needs handling in CS
puzzle - how to insert a validator into controller test - basically, just do a different test to test Validator.  Stand alone test.
createCatalogEntryFromBookModel - graceful handling of exception calling google books api
assignBookDetails - graceful handling of exception

******* NOTES ******

1. Testing filling in books after import of details... Separate Google calls into their own
   service, which then can be mocked - and isolated for the test.

******* USE CASE MASTER ******
