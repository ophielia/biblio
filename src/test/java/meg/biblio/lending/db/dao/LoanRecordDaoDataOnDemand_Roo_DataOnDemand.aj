// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package meg.biblio.lending.db.dao;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import meg.biblio.catalog.db.dao.BookDaoDataOnDemand;
import meg.biblio.common.db.dao.ClientDaoDataOnDemand;
import meg.biblio.lending.db.LoanRecordRepository;
import meg.biblio.lending.db.dao.LoanRecordDao;
import meg.biblio.lending.db.dao.LoanRecordDaoDataOnDemand;
import meg.biblio.lending.db.dao.PersonDaoDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LoanRecordDaoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LoanRecordDaoDataOnDemand: @Component;
    
    private Random LoanRecordDaoDataOnDemand.rnd = new SecureRandom();
    
    private List<LoanRecordDao> LoanRecordDaoDataOnDemand.data;
    
    @Autowired
    BookDaoDataOnDemand LoanRecordDaoDataOnDemand.bookDaoDataOnDemand;
    
    @Autowired
    PersonDaoDataOnDemand LoanRecordDaoDataOnDemand.personDaoDataOnDemand;
    
    @Autowired
    ClientDaoDataOnDemand LoanRecordDaoDataOnDemand.clientDaoDataOnDemand;
    
    @Autowired
    LoanRecordRepository LoanRecordDaoDataOnDemand.loanRecordRepository;
    
    public LoanRecordDao LoanRecordDaoDataOnDemand.getNewTransientLoanRecordDao(int index) {
        LoanRecordDao obj = new LoanRecordDao();
        setCheckoutdate(obj, index);
        setDuedate(obj, index);
        setReturned(obj, index);
        setSchoolyear(obj, index);
        setTeachername(obj, index);
        return obj;
    }
    
    public void LoanRecordDaoDataOnDemand.setCheckoutdate(LoanRecordDao obj, int index) {
        Date checkoutdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCheckoutdate(checkoutdate);
    }
    
    public void LoanRecordDaoDataOnDemand.setDuedate(LoanRecordDao obj, int index) {
        Date duedate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDuedate(duedate);
    }
    
    public void LoanRecordDaoDataOnDemand.setReturned(LoanRecordDao obj, int index) {
        Date returned = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReturned(returned);
    }
    
    public void LoanRecordDaoDataOnDemand.setSchoolyear(LoanRecordDao obj, int index) {
        Integer schoolyear = new Integer(index);
        obj.setSchoolyear(schoolyear);
    }
    
    public void LoanRecordDaoDataOnDemand.setTeachername(LoanRecordDao obj, int index) {
        String teachername = "teachername_" + index;
        obj.setTeachername(teachername);
    }
    
    public LoanRecordDao LoanRecordDaoDataOnDemand.getSpecificLoanRecordDao(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LoanRecordDao obj = data.get(index);
        Long id = obj.getId();
        return loanRecordRepository.findOne(id);
    }
    
    public LoanRecordDao LoanRecordDaoDataOnDemand.getRandomLoanRecordDao() {
        init();
        LoanRecordDao obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return loanRecordRepository.findOne(id);
    }
    
    public boolean LoanRecordDaoDataOnDemand.modifyLoanRecordDao(LoanRecordDao obj) {
        return false;
    }
    
    public void LoanRecordDaoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = loanRecordRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LoanRecordDao' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LoanRecordDao>();
        for (int i = 0; i < 10; i++) {
            LoanRecordDao obj = getNewTransientLoanRecordDao(i);
            try {
                loanRecordRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            loanRecordRepository.flush();
            data.add(obj);
        }
    }
    
}
